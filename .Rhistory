# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 1),  ylim = c(0, nSims))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims/bars, col  =  "red", lty = 3)
# dev.off()
M <- 100
# sample size of the simulated data
n <- 51
# SD of the simulated data
SD <- 15
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 20
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 1),  ylim = c(0, nSims))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims/bars, col  =  "red", lty = 3)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05,  ylim = c(0, nSims))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims/bars, col  =  "red", lty = 3)
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, nSims))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
M <- 107
# sample size of the simulated data
n <- 51
# SD of the simulated data
SD <- 15
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, nSims))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
# Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
M <- 108
# sample size of the simulated data
n <- 51
# SD of the simulated data
SD <- 15
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
M <- 150
# sample size of the simulated data
n <- 3
# SD of the simulated data
SD <- 15
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
M <- 150
# sample size of the simulated data
n <- 3
# SD of the simulated data
SD <- 0.1
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
M <- 150
# sample size of the simulated data
n <- 3
# SD of the simulated data
SD <- 40
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
SD <- 100
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
M <- 250
# sample size of the simulated data
n <- 3
# SD of the simulated data
SD <- 150
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
M <- 150
# sample size of the simulated data
n <- 5
# SD of the simulated data
SD <- 15
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
M <- 115
# sample size of the simulated data
n <- 5
# SD of the simulated data
SD <- 15
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
M <- 115
# sample size of the simulated data
n <- 8
# SD of the simulated data
SD <- 15
# With a mean difference of 6, and SD of 15, and a sample size of 26, the test
# has 50% power)
p <- numeric(nSims) # set up empty variable to store all simulated p-values
bars <- 100
# Run simulation
for(i in 1:nSims){ # for each simulated experiment
# Simulate data with specified mean, standard deviation, and sample size
x <- rnorm(n = n, mean = M, sd = SD)
# perform the t-test against mu (set to value you want to test against)
z <- t.test(x, mu = 100)
# get the p-value and store it
p[i] <- z$p.value
}
# Check power by summing significant p-values and dividing by number of
# simulations
(sum(p < 0.05) / nSims) # power
# Calculate power formally by power analysis
# determines M when power > 0. When power = 0, will set  M = 100.
power <- pwr.t.test(d = (M - 100) / SD, n = n, sig.level = 0.05,
type = "one.sample", alternative = "two.sided")$power
# Plot figure
# png(file = "P-valueDist.png", width = 4000, height = 3000, , units = "px",
#     res = 500)
# change white-space around graph
op <- par(mar = c(5, 7, 4, 4))
hist(p, breaks = bars, xlab = "P-values", ylab = "number of p-values\n",
axes = FALSE, main = paste("P-value Distribution with",
round(power * 100, digits = 1), "% Power"),
col = "grey", xlim = c(0, 0.05),  ylim = c(0, 10000))
axis(side = 1, at = seq(0, 1, 0.1), labels = seq(0, 1, 0.1))
axis(side = 2, at = seq(0, nSims, nSims/4), labels = seq(0, nSims, nSims / 4),
las = 2)
abline(h = nSims / bars, col = "red", lty = 3)
0.05*0.05*0.95
n <- 10 # set total trials
x <- 8 # set successes
theta <- seq(0, 1, len = 100) # create theta variable, from 0 to 1
like <- dbinom(x, n, theta) # create likelihood function
theta <- seq(0, 1, len = 100) # create theta variable, from 0 to 1
like <- dbinom(x, n, theta) # create likelihood function
plot(theta, like, type = 'l', xlab = expression(theta), ylab = 'Likelihood',
main = "Likelihood Curve")
?dbinom
like
dbinom(8, 10, 3)
dbinom(8, 10, 1:3)
theta
dbinom(8, 10, 1:100)
dbinom(8, 10, seq(0, 1, len = 100))
dbinom(0.8, 1, seq(0, 1, len = 100))
dbinom(8, 10, 0.5)
n <- 10 # set total trials
x <- 0 # set successes
theta <- seq(0, 1, len = 100) # create theta variable, from 0 to 1
like <- dbinom(x, n, theta) # create likelihood function
plot(theta, like, type = 'l', xlab = expression(theta), ylab = 'Likelihood',
main = "Likelihood Curve")
?dnorm
dnorm(0.8)
dnorm(rnorm(10)+1)
dnorm(seq(-1, 1, len = 100))
plot(dnorm(seq(-1, 1, len = 100)), seq(-1, 1, len = 100))
plot(seq(-1, 1, len = 100), dnorm(seq(-1, 1, len = 100)))
plot(seq(-1, 1, len = 100), dnorm(seq(-1, 1, len = 100), mean = 10))
